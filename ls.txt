use chrono::{DateTime, Local};
use std::fs;
use std::io;
use std::os::unix::fs::MetadataExt;
use std::path::PathBuf;
use std::time::UNIX_EPOCH;
use std::os::unix::fs::PermissionsExt;

pub fn ls(args: &[&str]) -> io::Result<()> {
    let mut long_format = false;
    let mut all_files = false;
    let mut classify = false;
    let mut paths: Vec<PathBuf> = vec![PathBuf::from("."), PathBuf::from("..")];

    for arg in args {
        match *arg {
            "-l" => long_format = true,
            "-a" => all_files = true,
            "-F" => classify = true,
            _ => paths.push(PathBuf::from(arg)),
        }
    }

    if paths.is_empty() {
        paths.push(PathBuf::from("."));
    }

    for path in paths {
        if path.is_dir() {
            let entries = fs::read_dir(path)?;

            for entry in entries {
                let entry = entry?;
                let file_name = entry.file_name();
                let file_name_str = file_name.to_string_lossy();

                if !all_files && file_name_str.starts_with('.') {
                    continue;
                }

                if long_format {
                    let metadata = entry.metadata()?;
                    let permissions = metadata.permissions();
                    let mode = metadata.mode();
                    let nlink = metadata.nlink();
                    let uid = metadata.uid();
                    let gid = metadata.gid();
                    let size = metadata.size();
                    let modified = metadata.modified()?.duration_since(UNIX_EPOCH).expect("error");
                    let datetime: DateTime<Local> = DateTime::from(UNIX_EPOCH + modified);
                    let formatted_time = datetime.format("%b %d %H:%M").to_string();

                    let file_type = if metadata.is_dir() { 'd' } else { '-' };
                    let user_perms = if mode & 0o400 != 0 { 'r' } else { '-' };
                    let user_write = if mode & 0o200 != 0 { 'w' } else { '-' };
                    let user_exec = if mode & 0o100 != 0 { 'x' } else { '-' };
                    let group_read = if mode & 0o040 != 0 { 'r' } else { '-' };
                    let group_write = if mode & 0o020 != 0 { 'w' } else { '-' };
                    let group_exec = if mode & 0o010 != 0 { 'x' } else { '-' };
                    let other_read = if mode & 0o004 != 0 { 'r' } else { '-' };
                    let other_write = if mode & 0o002 != 0 { 'w' } else { '-' };
                    let other_exec = if mode & 0o001 != 0 { 'x' } else { '-' };

                    println!(
                        "{}{}{}{}{}{}{}{}{}{} {} {} {} {} {} {}",
                        file_type,
                        user_perms,
                        user_write,
                        user_exec,
                        group_read,
                        group_write,
                        group_exec,
                        other_read,
                        other_write,
                        other_exec,
                        nlink,
                        uid,
                        gid,
                        size,
                        formatted_time,
                        file_name_str
                    );
                } else {
                    print!("{}", file_name_str);

                    if classify {
                        let metadata = entry.metadata()?;
                        if metadata.is_dir() {
                            print!("/");
                        } else if metadata.permissions().mode() & 0o111 != 0 {
                            print!("*");
                        }
                    }

                    print!("  ");
                }
            }
        } else {
                println!("ls: {}: No such file or directory", path.display());
            }
    }
    Ok(())
}
